{
  "version": 17,
  "variables": [
    {
      "key": "Product",
      "type": "query",
      "visible": true,
      "input": "fetch events\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.kind == \"SECURITY_EVENT\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| summarize rawValues = arrayRemoveNulls(arraySort(collectDistinct(event.provider)))\n| fieldsAdd values = if(arraySize(rawValues) > 0, rawValues, else: \"None\")",
      "multiple": true,
      "defaultValue": [
        "3420b2ac-f1cf-4b24-b62d-61ba1ba8ed05*"
      ]
    },
    {
      "key": "Registry",
      "type": "query",
      "visible": true,
      "input": "fetch events\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.kind == \"SECURITY_EVENT\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| summarize rawValues = arrayRemoveNulls(arraySort(collectDistinct(container_image.registry)))\n| fieldsAdd values = if(arraySize(rawValues) > 0, rawValues, else: \"None\")",
      "multiple": true,
      "defaultValue": [
        "3420b2ac-f1cf-4b24-b62d-61ba1ba8ed05*"
      ]
    },
    {
      "key": "Repository",
      "type": "query",
      "visible": true,
      "input": "fetch events\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.kind == \"SECURITY_EVENT\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| summarize rawValues = arrayRemoveNulls(arraySort(collectDistinct(container_image.repository)))\n| fieldsAdd values = if(arraySize(rawValues) > 0, rawValues, else: \"None\")",
      "multiple": true,
      "defaultValue": [
        "3420b2ac-f1cf-4b24-b62d-61ba1ba8ed05*"
      ]
    },
    {
      "key": "Tag",
      "type": "query",
      "visible": true,
      "input": "fetch events\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.kind == \"SECURITY_EVENT\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| summarize rawValues = arrayRemoveNulls(arraySort(collectDistinct(container_image.tags, expand:true)))\n| fieldsAdd values = if(arraySize(rawValues) > 0, rawValues, else: \"None\")",
      "multiple": true,
      "defaultValue": [
        "3420b2ac-f1cf-4b24-b62d-61ba1ba8ed05*"
      ]
    },
    {
      "key": "RiskLevel",
      "type": "query",
      "visible": true,
      "input": "fetch events\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.kind == \"SECURITY_EVENT\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup dt.security.risk.level\n| fieldsAdd orderHelper = if(dt.security.risk.level == \"CRITICAL\", 1, else: \nif(dt.security.risk.level == \"HIGH\", 2, else: \n  if(dt.security.risk.level == \"MEDIUM\", 3, else: \n    if(dt.security.risk.level == \"LOW\", 4, else: \n      if(dt.security.risk.level == \"NONE\", 5, else: \n        if(dt.security.risk.level == \"NOT_AVAILABLE\", 6)\n)))))\n| sort orderHelper asc\n| summarize rawValues = arrayRemoveNulls(collectDistinct(dt.security.risk.level))\n| fieldsAdd values = if(arraySize(rawValues) > 0, rawValues, else: \"None\")",
      "multiple": true,
      "defaultValue": [
        "3420b2ac-f1cf-4b24-b62d-61ba1ba8ed05*"
      ]
    },
    {
      "key": "Vulnerability",
      "type": "query",
      "visible": true,
      "input": "fetch events\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.kind == \"SECURITY_EVENT\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| summarize rawValues = arrayRemoveNulls(arraySort(collectDistinct(vulnerability.id)))\n| fieldsAdd values = if(arraySize(rawValues) > 0, rawValues, else: \"None\")",
      "multiple": true,
      "defaultValue": [
        "3420b2ac-f1cf-4b24-b62d-61ba1ba8ed05*"
      ]
    },
    {
      "key": "Component",
      "type": "query",
      "visible": true,
      "input": "fetch events\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.kind == \"SECURITY_EVENT\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| summarize rawValues = arrayRemoveNulls(arraySort(collectDistinct(component.name)))\n| fieldsAdd values = if(arraySize(rawValues) > 0, rawValues, else: \"None\")\n",
      "multiple": true,
      "defaultValue": [
        "3420b2ac-f1cf-4b24-b62d-61ba1ba8ed05*"
      ]
    },
    {
      "key": "RuntimeStatus",
      "type": "query",
      "visible": true,
      "input": "fetch events\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.kind == \"SECURITY_EVENT\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name,\n         container_image.registry, container_image.repository, container_image.tags}, sort: {timestamp desc}\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, \n           container_image.name=containerImageName, containerStatus}\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| summarize rawValues = arrayRemoveNulls(arraySort(collectDistinct(containerStatus)))\n| fieldsAdd values = if(arraySize(rawValues) > 0, rawValues, else: \"None\")\n",
      "multiple": true,
      "defaultValue": [
        "3420b2ac-f1cf-4b24-b62d-61ba1ba8ed05*"
      ]
    },
    {
      "key": "ProductStage",
      "type": "query",
      "visible": true,
      "input": "fetch events\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.kind == \"SECURITY_EVENT\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n| filter isNotNull(container_instance.id) AND contains(containerStatus, \"running\")\n| fieldsAdd releasesStage = if(isNull(releasesStage), \"None\", else:releasesStage)\n| summarize rawValues = arrayRemoveNulls(arraySort(collectDistinct(releasesStage)))\n| fieldsAdd values = if(arraySize(rawValues) > 0, rawValues, else: \"None\")",
      "multiple": true,
      "defaultValue": [
        "3420b2ac-f1cf-4b24-b62d-61ba1ba8ed05*"
      ]
    }
  ],
  "tiles": {
    "0": {
      "type": "data",
      "title": "",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| fields timestamp, Time=timestamp, \n          `Source product`=event.provider, Registry=container_image.registry,\n          `Risk level`=dt.security.risk.level ,`Risk score`=dt.security.risk.score, Vulnerability=vulnerability.title,\n          `Affected object`=object.id, `Vulnerable component`=component.name\n| sort {timestamp, direction:\"descending\"}, {`Risk score`, direction:\"descending\"}\n| fieldsRemove timestamp\n| limit 50",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "table",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "Risk level",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                },
                "comparator": "=",
                "label": "",
                "value": "CRITICAL"
              },
              {
                "id": 3,
                "color": {
                  "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                },
                "comparator": "=",
                "label": "",
                "value": "HIGH"
              },
              {
                "id": 4,
                "color": {
                  "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                },
                "comparator": "=",
                "label": "",
                "value": "MEDIUM"
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "categoricalBarChartSettings": {
            "categoryAxisLabel": "Source product,Registry,Risk level,Vulnerability,Affected object,Vulnerable component",
            "valueAxisLabel": "Risk score",
            "categoryAxis": [
              "Source product",
              "Registry",
              "Risk level",
              "Vulnerability",
              "Affected object",
              "Vulnerable component"
            ],
            "valueAxis": [
              "Risk score"
            ],
            "tooltipVariant": "single"
          },
          "hiddenLegendFields": [],
          "fieldMapping": {
            "timestamp": "Time",
            "leftAxisValues": [
              "Risk score"
            ],
            "leftAxisDimensions": [
              "Source product"
            ]
          },
          "truncationMode": "middle",
          "valueRepresentation": "absolute"
        },
        "singleValue": {
          "showLabel": true,
          "label": "",
          "prefixIcon": "",
          "recordField": "timestamp",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [
            [
              "Repository"
            ]
          ],
          "columnWidths": {
            "[\"event.provider\"]": 187.3975830078125,
            "[\"object.id\"]": 574.390625,
            "[\"container_image.registry\"]": 230.46875,
            "[\"container_image.repository\"]": 269.65625,
            "[\"container_image.tag\"]": 208.75,
            "[\"timestamp\"]": 170.96875,
            "[\"critical\"]": 113.125,
            "[\"high\"]": 97.78125,
            "[\"vulnerabilities\"]": 176,
            "[\"Id\"]": 211.38751220703125,
            "[\"Repository\"]": 264.375
          }
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {
            "value": "Risk score"
          },
          "legend": "auto",
          "displayedFields": [
            "Source product",
            "Registry",
            "Risk level",
            "Vulnerability",
            "Affected object",
            "Vulnerable component"
          ],
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "Risk score",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": [
            "Source product",
            "Registry",
            "Risk level",
            "Vulnerability",
            "Affected object",
            "Vulnerable component"
          ]
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "1": {
      "type": "markdown",
      "title": "",
      "content": "# Container vulnerability findings\n\nOverview of the vulnerability findings in the artifact registries of your container images. Learn more about [Security events ingest](https://dt-url.net/1d63p0v)."
    },
    "2": {
      "type": "data",
      "title": "",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| summarize {\n    `Risk score`=toDouble(takeMax(dt.security.risk.score)),\n    `Last finding`=takeMax(timestamp),\n    `Container images`=countDistinctExact(container_image.digest),\n    `Vulnerable components`=countDistinctExact(component.name)\n    }, \n    by:{Vulnerability=vulnerability.id, `Risk level`=dt.security.risk.level }\n| sort {`Risk score`, direction:\"descending\"}, {`Container images`, direction:\"descending\"},{`Vulnerable components`,direction:\"descending\"}\n| fields `Risk level`, Vulnerability, `Container images`, `Vulnerable components`, `Last finding`\n| limit 10",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "table",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "Risk score",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                },
                "comparator": "=",
                "label": "",
                "value": 9
              },
              {
                "id": 3,
                "color": {
                  "Default": "var(--dt-colors-charts-security-risk-level-high-default, #cd3741)"
                },
                "comparator": ">",
                "label": "",
                "value": 7
              }
            ]
          },
          {
            "id": 2,
            "field": "Risk level",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                },
                "comparator": "=",
                "label": "",
                "value": "CRITICAL"
              },
              {
                "id": 3,
                "color": {
                  "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                },
                "comparator": "=",
                "label": "",
                "value": "HIGH"
              },
              {
                "id": 4,
                "color": {
                  "Default": "var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"
                },
                "comparator": "=",
                "label": "",
                "value": "MEDIUM"
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "categoricalBarChartSettings": {
            "categoryAxisLabel": "Risk level,Vulnerability",
            "valueAxisLabel": "Container images,Vulnerable components",
            "categoryAxis": [
              "Risk level",
              "Vulnerability"
            ],
            "valueAxis": [
              "Container images",
              "Vulnerable components"
            ],
            "tooltipVariant": "single"
          },
          "fieldMapping": {
            "timestamp": "Last finding",
            "leftAxisValues": [
              "Container images"
            ],
            "leftAxisDimensions": [
              "Risk level"
            ]
          },
          "hiddenLegendFields": [],
          "truncationMode": "middle",
          "valueRepresentation": "absolute"
        },
        "singleValue": {
          "showLabel": true,
          "label": "",
          "prefixIcon": "",
          "recordField": "Vulnerability external id (CVE)",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [
            [
              "riskScore"
            ]
          ],
          "lineWrapIds": [],
          "columnWidths": {}
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {
            "value": "Container images"
          },
          "legend": "auto",
          "displayedFields": [
            "Risk level",
            "Vulnerability"
          ],
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "Container images",
              "rangeAxis": ""
            },
            {
              "valueAxis": "Vulnerable components",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": [
            "Risk level",
            "Vulnerability"
          ]
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "3": {
      "type": "data",
      "title": "",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| summarize {\n        Critical=countIf(dt.security.risk.level ==\"CRITICAL\"),\n        High=countIf(dt.security.risk.level ==\"HIGH\"),\n        `Container images`=countDistinctExact(container_image.digest),\n        `Vulnerable components`=countDistinctExact(component.name)\n}, by:{Repository=container_image.repository}\n| sort {Critical, direction:\"descending\"}, {High, direction:\"descending\"},\n       {`Container images`, direction:\"descending\"}, {`Vulnerable components`, direction:\"descending\"}\n| limit 10",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "table",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "Critical",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 2,
            "field": "High",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-security-risk-level-high-default, #cd3741)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "categoricalBarChartSettings": {
            "categoryAxis": [
              "Repository"
            ],
            "categoryAxisLabel": "Repository",
            "valueAxis": [
              "Critical",
              "High",
              "Container images",
              "Vulnerable components"
            ],
            "valueAxisLabel": "Critical,High,Container images,Vulnerable components",
            "tooltipVariant": "single"
          },
          "truncationMode": "middle"
        },
        "singleValue": {
          "showLabel": true,
          "label": "",
          "prefixIcon": "",
          "recordField": "Vulnerability external id (CVE)",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [],
          "columnWidths": {},
          "sortBy": {
            "columnId": "[\"# of Critical\"]",
            "direction": "descending"
          }
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {
            "value": "Critical"
          },
          "legend": "auto",
          "displayedFields": [
            "Repository"
          ],
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "Critical",
              "rangeAxis": ""
            },
            {
              "valueAxis": "High",
              "rangeAxis": ""
            },
            {
              "valueAxis": "Container images",
              "rangeAxis": ""
            },
            {
              "valueAxis": "Vulnerable components",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": [
            "Repository"
          ]
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "4": {
      "type": "data",
      "title": "Number of critical findings by registry",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| dedup {object.id, vulnerability.id, component.name,\n         container_image.registry, container_image.repository, container_image.tags}, sort: {timestamp desc}\n| filter in(dt.security.risk.level , {\"CRITICAL\"})\n| summarize {numberOfFindings = count()}, by:{container_image.registry}\n| sort numberOfFindings desc",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "donutChart",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "number-of-slices",
            "groupingThresholdValue": 10,
            "valueType": "absolute",
            "showTotalValue": false
          },
          "categoryOverrides": {},
          "categoricalBarChartSettings": {
            "categoryAxis": [
              "container_image.registry"
            ],
            "categoryAxisLabel": "container_image.registry",
            "valueAxis": [
              "numberOfFindings"
            ],
            "valueAxisLabel": "numberOfFindings",
            "tooltipVariant": "single"
          },
          "hiddenLegendFields": [],
          "truncationMode": "middle"
        },
        "singleValue": {
          "showLabel": true,
          "label": "container_image.registry",
          "prefixIcon": "",
          "recordField": "container_image.registry",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [],
          "columnWidths": {},
          "columnTypeOverrides": []
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {
            "value": "numberOfFindings"
          },
          "legend": "auto",
          "displayedFields": [
            "container_image.registry"
          ],
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "numberOfFindings",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": [
            "container_image.registry"
          ]
        },
        "label": {
          "showLabel": false,
          "label": "numberOfFindings"
        },
        "icon": {
          "showIcon": false,
          "icon": ""
        },
        "valueBoundaries": {
          "min": "auto",
          "max": "auto"
        },
        "dataMapping": {
          "dimension": "container_image.registry",
          "displayedFields": [
            "container_image.registry",
            "numberOfFindings"
          ],
          "value": "numberOfFindings",
          "longitude": "numberOfFindings"
        },
        "tooltip": {
          "showCustomFields": false
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "5": {
      "type": "data",
      "title": "Critical risk",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| filter dt.security.risk.level ==\"CRITICAL\"\n| summarize {Vulnerabilities=countDistinctExact(vulnerability.id)}",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "Vulnerabilities",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                },
                "comparator": "≥",
                "label": "",
                "value": 1
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "categoricalBarChartSettings": {
            "categoryAxisLabel": "Vulnerabilities",
            "valueAxisLabel": "Vulnerabilities",
            "categoryAxis": [
              "Vulnerabilities"
            ],
            "valueAxis": [
              "Vulnerabilities"
            ],
            "tooltipVariant": "single"
          },
          "leftYAxisSettings": {
            "max": "auto",
            "scale": "linear"
          },
          "hiddenLegendFields": [],
          "legend": {
            "hidden": true
          },
          "seriesOverrides": [
            {
              "seriesId": [
                "findings"
              ],
              "override": {
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                }
              }
            }
          ],
          "truncationMode": "middle"
        },
        "singleValue": {
          "showLabel": false,
          "label": "Vulnerabilities",
          "prefixIcon": "",
          "recordField": "Vulnerabilities",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "isInverseTrend": true,
            "isVisible": false,
            "isRelative": false,
            "trendType": "auto"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [],
          "columnWidths": {},
          "sortBy": {
            "columnId": "[\"scandate\"]",
            "direction": "descending"
          },
          "columnTypeOverrides": []
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {},
          "legend": "auto",
          "displayedFields": [],
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "Vulnerabilities",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": []
        },
        "label": {
          "showLabel": false,
          "label": "Vulnerabilities"
        },
        "icon": {
          "showIcon": false,
          "icon": ""
        },
        "valueBoundaries": {
          "min": "auto",
          "max": "auto"
        },
        "unitsOverrides": [
          {
            "identifier": "criticals",
            "unitCategory": "unspecified",
            "baseUnit": "none",
            "displayUnit": null,
            "decimals": 0,
            "suffix": "",
            "delimiter": false,
            "added": 1713193663126
          }
        ],
        "dataMapping": {
          "dimension": "Vulnerabilities",
          "displayedFields": [
            "Vulnerabilities"
          ],
          "value": "Vulnerabilities",
          "longitude": "Vulnerabilities"
        },
        "tooltip": {
          "showCustomFields": false
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "6": {
      "type": "data",
      "title": "High risk",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| filter dt.security.risk.level ==\"HIGH\"\n| summarize {Vulnerabilities=countDistinctExact(vulnerability.id)}",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "Vulnerabilities",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                },
                "comparator": "≥",
                "label": "",
                "value": 1
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "categoricalBarChartSettings": {
            "categoryAxisLabel": "Vulnerabilities",
            "valueAxisLabel": "Vulnerabilities",
            "categoryAxis": [
              "Vulnerabilities"
            ],
            "valueAxis": [
              "Vulnerabilities"
            ],
            "tooltipVariant": "single"
          },
          "leftYAxisSettings": {
            "max": "auto"
          },
          "hiddenLegendFields": [],
          "seriesOverrides": [
            {
              "seriesId": [
                "findings"
              ],
              "override": {
                "color": {
                  "Default": "var(--dt-colors-charts-security-risk-level-high-default, #cd3741)"
                }
              }
            }
          ],
          "legend": {
            "hidden": true
          },
          "truncationMode": "middle"
        },
        "singleValue": {
          "showLabel": false,
          "label": "Vulnerabilities",
          "prefixIcon": "",
          "recordField": "Vulnerabilities",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "isInverseTrend": true,
            "isRelative": false,
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [],
          "columnWidths": {},
          "columnTypeOverrides": []
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {},
          "displayedFields": [],
          "legend": {
            "hidden": false,
            "position": "auto"
          },
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "Vulnerabilities",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": []
        },
        "label": {
          "showLabel": false,
          "label": "Vulnerabilities"
        },
        "icon": {
          "showIcon": false,
          "icon": ""
        },
        "valueBoundaries": {
          "min": "auto",
          "max": "auto"
        },
        "unitsOverrides": [
          {
            "identifier": "highs",
            "unitCategory": "unspecified",
            "baseUnit": "none",
            "displayUnit": null,
            "decimals": 0,
            "suffix": "",
            "delimiter": false,
            "added": 1713193676655
          }
        ],
        "dataMapping": {
          "dimension": "Vulnerabilities",
          "displayedFields": [
            "Vulnerabilities"
          ],
          "value": "Vulnerabilities",
          "longitude": "Vulnerabilities"
        },
        "tooltip": {
          "showCustomFields": false
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "7": {
      "type": "data",
      "title": "Number of critical findings by repository",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| dedup {object.id, vulnerability.id, component.name,\n         container_image.registry, container_image.repository, container_image.tags}, sort: {timestamp desc}\n| filter in(dt.security.risk.level , {\"CRITICAL\"})\n| summarize {numberOfFindings = count()}, by:{container_image.repository}\n| sort numberOfFindings desc",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "donutChart",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "number-of-slices",
            "groupingThresholdValue": 10,
            "valueType": "absolute",
            "showTotalValue": false
          },
          "categoryOverrides": {},
          "categoricalBarChartSettings": {
            "categoryAxis": [
              "container_image.repository"
            ],
            "valueAxis": [
              "numberOfFindings"
            ],
            "categoryAxisLabel": "container_image.repository",
            "valueAxisLabel": "numberOfFindings",
            "tooltipVariant": "single"
          },
          "colorPalette": "categorical",
          "truncationMode": "middle"
        },
        "singleValue": {
          "showLabel": true,
          "label": "error",
          "prefixIcon": "",
          "recordField": "error",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [],
          "columnWidths": {},
          "columnTypeOverrides": []
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {
            "value": "numberOfFindings"
          },
          "legend": "auto",
          "displayedFields": [
            "container_image.repository"
          ],
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "numberOfFindings",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": [
            "container_image.repository"
          ]
        },
        "label": {
          "showLabel": false,
          "label": "numberOfFindings"
        },
        "icon": {
          "showIcon": false,
          "icon": ""
        },
        "valueBoundaries": {
          "min": "auto",
          "max": "auto"
        },
        "dataMapping": {
          "dimension": "container_image.repository",
          "displayedFields": [
            "container_image.repository",
            "numberOfFindings"
          ],
          "value": "numberOfFindings",
          "longitude": "numberOfFindings"
        },
        "tooltip": {
          "showCustomFields": false
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "10": {
      "type": "data",
      "title": "Number of vulnerabilities by risk",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| summarize {\n    numberOfVulnerabilities = countDistinctExact(vulnerability.id),\n    riskScore=takeMax(dt.security.risk.score)}, by:{dt.security.risk.level }\n| sort riskScore desc",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "donutChart",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "number-of-slices",
            "groupingThresholdValue": 3,
            "valueType": "absolute",
            "showTotalValue": true,
            "hideLabels": false
          },
          "categoryOverrides": {
            "NOT_AVAILABLE": {
              "color": "var(--dt-colors-charts-logstatus-none-default, #2c2f3f)",
              "added": 1713354177614
            },
            "NONE": {
              "color": "var(--dt-colors-charts-categorical-color-05-default, #84859a)",
              "added": 1718981822129
            }
          },
          "categoricalBarChartSettings": {
            "categoryAxis": [
              "dt.security.risk.level"
            ],
            "categoryAxisLabel": "dt.security.risk.level",
            "valueAxis": [
              "numberOfVulnerabilities",
              "riskScore"
            ],
            "valueAxisLabel": "numberOfVulnerabilities,riskScore",
            "tooltipVariant": "single"
          },
          "hiddenLegendFields": [],
          "colorPalette": "security-risk-level",
          "truncationMode": "middle"
        },
        "singleValue": {
          "showLabel": true,
          "label": "container_image.registry",
          "prefixIcon": "",
          "recordField": "container_image.registry",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [],
          "columnWidths": {},
          "columnTypeOverrides": []
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {
            "value": "numberOfVulnerabilities"
          },
          "legend": "auto",
          "displayedFields": [
            "dt.security.risk.level"
          ],
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "numberOfVulnerabilities",
              "rangeAxis": ""
            },
            {
              "valueAxis": "riskScore",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": [
            "dt.security.risk.level"
          ]
        },
        "label": {
          "showLabel": false,
          "label": "numberOfVulnerabilities"
        },
        "icon": {
          "showIcon": false,
          "icon": ""
        },
        "valueBoundaries": {
          "min": "auto",
          "max": "auto"
        },
        "dataMapping": {
          "dimension": "dt.security.risk.level",
          "displayedFields": [
            "dt.security.risk.level",
            "numberOfVulnerabilities"
          ],
          "value": "numberOfVulnerabilities",
          "longitude": "numberOfVulnerabilities",
          "latitude": "riskScore"
        },
        "tooltip": {}
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "11": {
      "type": "data",
      "title": "Affected registries",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| summarize {registries=countDistinctExact(container_image.registry)}",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "absolute",
            "groupingThresholdValue": 0,
            "valueType": "absolute"
          },
          "categoryOverrides": {
            "NOT_AVAILABLE": {
              "color": "var(--dt-colors-charts-logstatus-none-default, #2c2f3f)",
              "added": 1713354177614
            }
          },
          "categoricalBarChartSettings": {
            "categoryAxisLabel": "dt.security.risk.level ",
            "valueAxisLabel": "registries"
          },
          "hiddenLegendFields": [],
          "colorPalette": "security-risk-level"
        },
        "singleValue": {
          "showLabel": false,
          "label": "",
          "prefixIcon": "",
          "recordField": "registries",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [],
          "columnWidths": {}
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {},
          "displayedFields": [],
          "legend": {
            "hidden": false,
            "position": "auto"
          },
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "registries",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": []
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "12": {
      "type": "data",
      "title": "Container repositories",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| summarize {repositories=countDistinctExact(container_image.repository)}",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "absolute",
            "groupingThresholdValue": 0,
            "valueType": "absolute"
          },
          "categoryOverrides": {
            "NOT_AVAILABLE": {
              "color": "var(--dt-colors-charts-logstatus-none-default, #2c2f3f)",
              "added": 1713354177614
            }
          },
          "categoricalBarChartSettings": {
            "categoryAxisLabel": "repositories",
            "valueAxisLabel": "repositories",
            "categoryAxis": [
              "repositories"
            ],
            "valueAxis": [
              "repositories"
            ],
            "tooltipVariant": "single"
          },
          "hiddenLegendFields": [],
          "colorPalette": "security-risk-level",
          "truncationMode": "middle",
          "legend": {
            "hidden": true
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "repositories",
          "prefixIcon": "",
          "recordField": "repositories",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [],
          "columnWidths": {},
          "columnTypeOverrides": []
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {},
          "displayedFields": [],
          "legend": {
            "hidden": false,
            "position": "auto"
          },
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "repositories",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": []
        },
        "label": {
          "showLabel": false,
          "label": "repositories"
        },
        "icon": {
          "showIcon": false,
          "icon": ""
        },
        "valueBoundaries": {
          "min": "auto",
          "max": "auto"
        },
        "dataMapping": {
          "dimension": "repositories",
          "displayedFields": [
            "repositories"
          ],
          "value": "repositories",
          "longitude": "repositories"
        },
        "tooltip": {
          "showCustomFields": false
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "13": {
      "type": "data",
      "title": "Container images",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| summarize {containerImages=countDistinctExact(container_image.digest)}",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "absolute",
            "groupingThresholdValue": 0,
            "valueType": "absolute"
          },
          "categoryOverrides": {
            "NOT_AVAILABLE": {
              "color": "var(--dt-colors-charts-logstatus-none-default, #2c2f3f)",
              "added": 1713354177614
            }
          },
          "categoricalBarChartSettings": {
            "categoryAxisLabel": "containerImages",
            "valueAxisLabel": "containerImages",
            "categoryAxis": [
              "containerImages"
            ],
            "valueAxis": [
              "containerImages"
            ],
            "tooltipVariant": "single"
          },
          "hiddenLegendFields": [],
          "colorPalette": "security-risk-level",
          "truncationMode": "middle",
          "legend": {
            "hidden": true
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "containerImages",
          "prefixIcon": "",
          "recordField": "containerImages",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [],
          "columnWidths": {},
          "columnTypeOverrides": []
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {},
          "displayedFields": [],
          "legend": {
            "hidden": false,
            "position": "auto"
          },
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "containerImages",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": []
        },
        "label": {
          "showLabel": false,
          "label": "containerImages"
        },
        "icon": {
          "showIcon": false,
          "icon": ""
        },
        "valueBoundaries": {
          "min": "auto",
          "max": "auto"
        },
        "dataMapping": {
          "dimension": "containerImages",
          "displayedFields": [
            "containerImages"
          ],
          "value": "containerImages",
          "longitude": "containerImages"
        },
        "tooltip": {
          "showCustomFields": false
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "15": {
      "type": "data",
      "title": "Vulnerable components",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| summarize {components=countDistinctExact(component.name)}",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "absolute",
            "groupingThresholdValue": 0,
            "valueType": "absolute"
          },
          "categoryOverrides": {
            "NOT_AVAILABLE": {
              "color": "var(--dt-colors-charts-logstatus-none-default, #2c2f3f)",
              "added": 1713354177614
            }
          },
          "categoricalBarChartSettings": {
            "categoryAxisLabel": "components",
            "valueAxisLabel": "components",
            "categoryAxis": [
              "components"
            ],
            "valueAxis": [
              "components"
            ],
            "tooltipVariant": "single"
          },
          "hiddenLegendFields": [],
          "colorPalette": "security-risk-level",
          "truncationMode": "middle",
          "legend": {
            "hidden": true
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "components",
          "prefixIcon": "",
          "recordField": "components",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [],
          "columnWidths": {},
          "columnTypeOverrides": []
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {},
          "displayedFields": [],
          "legend": {
            "hidden": false,
            "position": "auto"
          },
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "components",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": []
        },
        "label": {
          "showLabel": false,
          "label": "components"
        },
        "icon": {
          "showIcon": false,
          "icon": ""
        },
        "valueBoundaries": {
          "min": "auto",
          "max": "auto"
        },
        "dataMapping": {
          "dimension": "components",
          "displayedFields": [
            "components"
          ],
          "value": "components",
          "longitude": "components"
        },
        "tooltip": {
          "showCustomFields": false
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "16": {
      "type": "markdown",
      "title": "",
      "content": "____\n## Affected artifacts\n---"
    },
    "17": {
      "type": "data",
      "title": "",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| summarize {\n        Critical=countIf(dt.security.risk.level ==\"CRITICAL\"),\n        High=countIf(dt.security.risk.level ==\"HIGH\"),\n        Repositories=countDistinctExact(container_image.repository),\n        `Container images`=countDistinctExact(container_image.digest)\n}, by:{Component=component.name}\n| sort {Critical, direction:\"descending\"}, {High, direction:\"descending\"}\n| limit 10",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "table",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "Critical",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 2,
            "field": "High",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-categorical-color-12-default, #cd3741)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "categoricalBarChartSettings": {
            "categoryAxisLabel": "Component",
            "valueAxisLabel": "Critical,High,Repositories,Container images",
            "categoryAxis": [
              "Component"
            ],
            "valueAxis": [
              "Critical",
              "High",
              "Repositories",
              "Container images"
            ],
            "tooltipVariant": "single"
          },
          "truncationMode": "middle"
        },
        "singleValue": {
          "showLabel": true,
          "label": "",
          "prefixIcon": "",
          "recordField": "timestamp",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [
            [
              "Repository"
            ]
          ],
          "columnWidths": {
            "[\"event.provider\"]": 187.3975830078125,
            "[\"object.id\"]": 574.390625,
            "[\"container_image.registry\"]": 230.46875,
            "[\"container_image.repository\"]": 269.65625,
            "[\"container_image.tag\"]": 208.75,
            "[\"timestamp\"]": 170.96875,
            "[\"critical\"]": 113.125,
            "[\"high\"]": 97.78125,
            "[\"vulnerabilities\"]": 176,
            "[\"Id\"]": 211.38751220703125,
            "[\"Repository\"]": 264.375
          }
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {
            "value": "Critical"
          },
          "legend": "auto",
          "displayedFields": [
            "Component"
          ],
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "Critical",
              "rangeAxis": ""
            },
            {
              "valueAxis": "High",
              "rangeAxis": ""
            },
            {
              "valueAxis": "Repositories",
              "rangeAxis": ""
            },
            {
              "valueAxis": "Container images",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": [
            "Component"
          ]
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "18": {
      "type": "data",
      "title": "",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| summarize {\n        Critical=countIf(dt.security.risk.level ==\"CRITICAL\"),\n        High=countIf(dt.security.risk.level ==\"HIGH\"),\n        `Container images`=countDistinctExact(container_image.digest),\n        `Vulnerable components`=countDistinctExact(component.name)\n}, by:{Registry=container_image.registry}\n| sort {Critical, direction:\"descending\"}, {High, direction:\"descending\"},\n       {`Container images`, direction:\"descending\"}, {`Vulnerable components`, direction:\"descending\"}\n| limit 10",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "table",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "Critical",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              }
            ]
          },
          {
            "id": 2,
            "field": "High",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 0,
                "color": {
                  "Default": "var(--dt-colors-charts-security-risk-level-high-default, #cd3741)"
                },
                "comparator": ">",
                "label": "",
                "value": 0
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "categoricalBarChartSettings": {
            "categoryAxis": [
              "Registry"
            ],
            "categoryAxisLabel": "Registry",
            "valueAxis": [
              "Critical",
              "High",
              "Container images",
              "Vulnerable components"
            ],
            "valueAxisLabel": "Critical,High,Container images,Vulnerable components",
            "tooltipVariant": "single"
          },
          "truncationMode": "middle"
        },
        "singleValue": {
          "showLabel": true,
          "label": "",
          "prefixIcon": "",
          "recordField": "Vulnerability external id (CVE)",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [],
          "columnWidths": {},
          "sortBy": {
            "columnId": "[\"# of Critical\"]",
            "direction": "descending"
          }
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {
            "value": "Critical"
          },
          "legend": "auto",
          "displayedFields": [
            "Registry"
          ],
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "Critical",
              "rangeAxis": ""
            },
            {
              "valueAxis": "High",
              "rangeAxis": ""
            },
            {
              "valueAxis": "Container images",
              "rangeAxis": ""
            },
            {
              "valueAxis": "Vulnerable components",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": [
            "Registry"
          ]
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "19": {
      "type": "markdown",
      "title": "",
      "content": "----\n## Vulnerabilities\n---"
    },
    "20": {
      "type": "data",
      "title": "Medium risk",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// dashboard variables\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n| dedup {object.id, vulnerability.id, component.name, component.version,\n         container_image.registry, container_image.repository}, sort: {timestamp desc}\n// aggregation and custom filtering\n| filter dt.security.risk.level ==\"MEDIUM\"\n| summarize {Vulnerabilities=countDistinctExact(vulnerability.id)}",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "Vulnerabilities",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-categorical-color-06-default, #a9780f)"
                },
                "comparator": "≥",
                "label": "",
                "value": 1
              }
            ]
          }
        ],
        "chartSettings": {
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "categoricalBarChartSettings": {
            "categoryAxisLabel": "scandate",
            "valueAxisLabel": "highs"
          },
          "leftYAxisSettings": {
            "max": "auto"
          },
          "hiddenLegendFields": [],
          "seriesOverrides": [
            {
              "seriesId": [
                "findings"
              ],
              "override": {
                "color": {
                  "Default": "var(--dt-colors-charts-security-risk-level-high-default, #cd3741)"
                }
              }
            }
          ],
          "legend": {
            "hidden": true
          }
        },
        "singleValue": {
          "showLabel": false,
          "label": "",
          "prefixIcon": "",
          "recordField": "Vulnerabilities",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "isInverseTrend": true,
            "isRelative": false,
            "trendType": "auto",
            "isVisible": false
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [],
          "columnWidths": {}
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {},
          "displayedFields": [],
          "legend": {
            "hidden": false,
            "position": "auto"
          },
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "Vulnerabilities",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": []
        },
        "unitsOverrides": [
          {
            "identifier": "highs",
            "unitCategory": "unspecified",
            "baseUnit": "none",
            "displayUnit": null,
            "decimals": 0,
            "suffix": "",
            "delimiter": false,
            "added": 1713193676655
          }
        ]
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "21": {
      "type": "data",
      "title": "Vulnerability findings over time by provider product",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n// dashboard variables\n| fieldsAdd container_image.tags=asArray(container_image.tags)\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n// aggregation and custom filtering\n| makeTimeseries count(), time:{timestamp}, by:{event.provider}",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "areaChart",
      "visualizationSettings": {
        "thresholds": [],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "categoricalBarChartSettings": {
            "categoryAxisLabel": "event.provider",
            "valueAxisLabel": "interval",
            "categoryAxis": [
              "event.provider"
            ],
            "valueAxis": [
              "interval"
            ],
            "tooltipVariant": "single"
          },
          "hiddenLegendFields": [
            "interval"
          ],
          "fieldMapping": {
            "timestamp": "timeframe",
            "leftAxisValues": [
              "count()"
            ]
          },
          "leftYAxisSettings": {
            "scale": "linear"
          },
          "truncationMode": "middle",
          "valueRepresentation": "absolute",
          "xAxisLabel": "timeframe",
          "xAxisIsLabelVisible": false,
          "legend": {
            "hidden": true
          }
        },
        "singleValue": {
          "showLabel": true,
          "label": "timestamp",
          "prefixIcon": "",
          "recordField": "timestamp",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "trendType": "auto",
            "isVisible": true
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [
            [
              "Repository"
            ]
          ],
          "columnWidths": {
            "[\"event.provider\"]": 187.3975830078125,
            "[\"object.id\"]": 574.390625,
            "[\"container_image.registry\"]": 230.46875,
            "[\"container_image.repository\"]": 269.65625,
            "[\"container_image.tag\"]": 208.75,
            "[\"timestamp\"]": 170.96875,
            "[\"critical\"]": 113.125,
            "[\"high\"]": 97.78125,
            "[\"vulnerabilities\"]": 176,
            "[\"Id\"]": 211.38751220703125,
            "[\"Repository\"]": 264.375
          },
          "columnTypeOverrides": [
            {
              "fields": [
                "count()"
              ],
              "value": "sparkline",
              "id": 1737375118283
            }
          ]
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {
            "value": "event.provider"
          },
          "legend": "auto",
          "displayedFields": [
            "event.provider"
          ],
          "colorMode": "color-palette",
          "colorPalette": "categorical"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "interval",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": [
            "event.provider"
          ]
        },
        "label": {
          "showLabel": false,
          "label": "interval"
        },
        "icon": {
          "showIcon": false,
          "icon": ""
        },
        "valueBoundaries": {
          "min": "auto",
          "max": "auto"
        },
        "dataMapping": {
          "dimension": "interval",
          "displayedFields": [
            "interval",
            "event.provider"
          ],
          "value": "interval",
          "longitude": "interval"
        },
        "tooltip": {
          "showCustomFields": false
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    },
    "22": {
      "type": "markdown",
      "title": "",
      "content": "##### Most recent 50 vulnerability findings \n___"
    },
    "23": {
      "type": "markdown",
      "title": "",
      "content": "##### Top 10 vulnerable components by number of critical findings\n___"
    },
    "24": {
      "type": "markdown",
      "title": "",
      "content": "##### Top 10 affected container repositories by number of critical findings\n___"
    },
    "25": {
      "type": "markdown",
      "title": "",
      "content": "##### Top 10 vulnerabilities by risk and number of container images\n____\n"
    },
    "26": {
      "type": "markdown",
      "title": "",
      "content": "##### Top 10 affected registries by number of critical findings\n___"
    },
    "27": {
      "type": "data",
      "title": "Total ingested findings",
      "query": "fetch events\n// data access\n| filter dt.system.bucket == \"default_security_custom_events\"\n     AND event.type == \"VULNERABILITY_FINDING\"\n     AND object.type == \"CONTAINER_IMAGE\"\n     AND isNotNull(component.name)\n// dashboard variables\n| fieldsAdd container_image.tags=asArray(container_image.tags)\n| filter in(event.provider, $Product)\n     AND in(container_image.registry, $Registry)\n     AND in(container_image.repository, $Repository)\n     AND iAny(in(container_image.tags[], $Tag))\n     AND in(dt.security.risk.level , $RiskLevel)\n     AND in(vulnerability.id, $Vulnerability)\n     AND in(component.name, $Component)\n// now enrich the runtime context\n| join [\n    fetch dt.entity.container_group_instance, from:now()-3h\n    | fieldsAdd entity.name, containerImageDigest, containerImageName, workloadName, containerStatus, processes=contains[dt.entity.process_group_instance]\n    | expand dt.entity.process=processes\n        | fieldsRemove processes\n        | join [\n            fetch dt.entity.process_group_instance, from:now()-3h\n        ], on:{left[dt.entity.process]==right[id]}, kind:leftOuter, fields:{releasesProduct, releasesStage}\n], on:{left[container_image.digest]==right[containerImageDigest]}, kind:leftOuter,\n   fields:{container_instance.id=id, container_instance.name=entity.name, container_image.name=containerImageName,\n           releasesProduct, releasesStage, containerStatus}\n// filter by runtime status and product stage\n| parse containerStatus, \"\"\"LD* \"state=\" LD:containerStatus (\"}\" | \",\")\"\"\"\n| fieldsAdd containerStatus=if(isNull(containerStatus),\"not running\",else:containerStatus)\n| fieldsAdd releasesStage=if(isNull(releasesStage), \"None\", else:releasesStage)\n| filter in(containerStatus, $RuntimeStatus) AND in(releasesStage,$ProductStage)\n// aggregation and custom filtering\n| summarize {Findings=count()}",
      "davis": {
        "enabled": false,
        "davisVisualization": {
          "isAvailable": true
        }
      },
      "visualization": "singleValue",
      "visualizationSettings": {
        "thresholds": [
          {
            "id": 1,
            "field": "Vulnerabilities",
            "title": "",
            "isEnabled": true,
            "rules": [
              {
                "id": 2,
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                },
                "comparator": "≥",
                "label": "",
                "value": 1
              }
            ]
          }
        ],
        "chartSettings": {
          "xAxisScaling": "analyzedTimeframe",
          "gapPolicy": "connect",
          "circleChartSettings": {
            "groupingThresholdType": "relative",
            "groupingThresholdValue": 0,
            "valueType": "relative"
          },
          "categoryOverrides": {},
          "categoricalBarChartSettings": {
            "categoryAxisLabel": "Findings",
            "valueAxisLabel": "Findings",
            "categoryAxis": [
              "Findings"
            ],
            "valueAxis": [
              "Findings"
            ],
            "tooltipVariant": "single"
          },
          "leftYAxisSettings": {
            "max": "auto",
            "scale": "linear"
          },
          "hiddenLegendFields": [],
          "legend": {
            "hidden": true
          },
          "seriesOverrides": [
            {
              "seriesId": [
                "findings"
              ],
              "override": {
                "color": {
                  "Default": "var(--dt-colors-charts-loglevel-emergency-default, #9033a3)"
                }
              }
            }
          ],
          "truncationMode": "middle"
        },
        "singleValue": {
          "showLabel": false,
          "label": "Findings",
          "prefixIcon": "",
          "recordField": "Findings",
          "autoscale": true,
          "alignment": "center",
          "colorThresholdTarget": "value",
          "trend": {
            "isInverseTrend": true,
            "isVisible": false,
            "isRelative": false,
            "trendType": "auto"
          }
        },
        "table": {
          "rowDensity": "condensed",
          "enableSparklines": false,
          "hiddenColumns": [],
          "lineWrapIds": [],
          "columnWidths": {},
          "sortBy": {
            "columnId": "[\"scandate\"]",
            "direction": "descending"
          },
          "columnTypeOverrides": []
        },
        "honeycomb": {
          "shape": "square",
          "dataMappings": {},
          "legend": "auto",
          "displayedFields": [],
          "colorMode": "color-palette",
          "colorPalette": "blue"
        },
        "histogram": {
          "dataMappings": [
            {
              "valueAxis": "Findings",
              "rangeAxis": ""
            }
          ],
          "variant": "single",
          "displayedFields": []
        },
        "label": {
          "showLabel": false,
          "label": "Findings"
        },
        "icon": {
          "showIcon": false,
          "icon": ""
        },
        "valueBoundaries": {
          "min": "auto",
          "max": "auto"
        },
        "unitsOverrides": [
          {
            "identifier": "criticals",
            "unitCategory": "unspecified",
            "baseUnit": "none",
            "displayUnit": null,
            "decimals": 0,
            "suffix": "",
            "delimiter": false,
            "added": 1713193663126
          }
        ],
        "dataMapping": {
          "dimension": "Findings",
          "displayedFields": [
            "Findings"
          ],
          "value": "Findings",
          "longitude": "Findings"
        },
        "tooltip": {
          "showCustomFields": false
        }
      },
      "querySettings": {
        "maxResultRecords": 1000,
        "defaultScanLimitGbytes": 500,
        "maxResultMegaBytes": 100,
        "defaultSamplingRatio": 10,
        "enableSampling": false
      }
    }
  },
  "layouts": {
    "0": {
      "x": 0,
      "y": 31,
      "w": 24,
      "h": 12
    },
    "1": {
      "x": 0,
      "y": 0,
      "w": 24,
      "h": 2
    },
    "2": {
      "x": 0,
      "y": 17,
      "w": 12,
      "h": 6
    },
    "3": {
      "x": 12,
      "y": 24,
      "w": 12,
      "h": 6
    },
    "4": {
      "x": 12,
      "y": 8,
      "w": 6,
      "h": 8
    },
    "5": {
      "x": 0,
      "y": 8,
      "w": 3,
      "h": 4
    },
    "6": {
      "x": 0,
      "y": 12,
      "w": 3,
      "h": 2
    },
    "7": {
      "x": 18,
      "y": 8,
      "w": 6,
      "h": 8
    },
    "10": {
      "x": 3,
      "y": 8,
      "w": 6,
      "h": 8
    },
    "11": {
      "x": 9,
      "y": 14,
      "w": 3,
      "h": 2
    },
    "12": {
      "x": 9,
      "y": 12,
      "w": 3,
      "h": 2
    },
    "13": {
      "x": 9,
      "y": 10,
      "w": 3,
      "h": 2
    },
    "15": {
      "x": 9,
      "y": 8,
      "w": 3,
      "h": 2
    },
    "16": {
      "x": 9,
      "y": 6,
      "w": 15,
      "h": 2
    },
    "17": {
      "x": 0,
      "y": 24,
      "w": 12,
      "h": 6
    },
    "18": {
      "x": 12,
      "y": 17,
      "w": 12,
      "h": 6
    },
    "19": {
      "x": 0,
      "y": 6,
      "w": 9,
      "h": 2
    },
    "20": {
      "x": 0,
      "y": 14,
      "w": 3,
      "h": 2
    },
    "21": {
      "x": 3,
      "y": 2,
      "w": 21,
      "h": 4
    },
    "22": {
      "x": 0,
      "y": 30,
      "w": 24,
      "h": 1
    },
    "23": {
      "x": 0,
      "y": 23,
      "w": 12,
      "h": 1
    },
    "24": {
      "x": 12,
      "y": 23,
      "w": 12,
      "h": 1
    },
    "25": {
      "x": 0,
      "y": 16,
      "w": 12,
      "h": 1
    },
    "26": {
      "x": 12,
      "y": 16,
      "w": 12,
      "h": 1
    },
    "27": {
      "x": 0,
      "y": 2,
      "w": 3,
      "h": 4
    }
  },
  "importedWithCode": false,
  "settings": {
    "defaultTimeframe": {
      "value": {
        "from": "now()-7d",
        "to": "now()"
      },
      "enabled": true
    }
  }
}